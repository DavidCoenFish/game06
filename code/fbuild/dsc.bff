#once
// append solution items
{
    .temp =  [
        .Path = "solution_items/$_CURRENT_BFF_DIR_$"
        .Items = { "$_CURRENT_BFF_DIR_$/dsc.bff" }
    ]
    ^SolutionItemArray + .temp
}

//pull in child scripts
#include "visualstudio/visualstudio.bff"
#include "windows/windows.bff"

//Print(.VisualStudioSettings)
//Print(.Windows10_SDK_X64)

.ConfigurationArray = {}

.CommonConfig = [
    .Librarian = ""
    .LibrarianOptions = ""
    .Compiler = ""
    .CompilerOptions = ""
    .Linker = ""
    .LinkerOptions = ""
    {
        Using( .VisualStudioSettings )	
        Using( .ToolChain_VS_Windows_X64 )
        ^Librarian = .Librarian
        ^LibrarianOptions = .LibrarianOptions
        ^Compiler = .Compiler
        ^CompilerOptions = .CompilerOptions
        ^Linker = .Linker
        ^LinkerOptions = .LinkerOptions
    }
    {
        Using(.Windows10_SDK_X64)
        ^CompilerOptions + .CompilerOptions
        ^LinkerOptions + .LinkerOptions
        // LibrarianOptions is not appended by the .Windows10_SDK_X64
    }
]
{
    Using(.Windows10_SDK_X64)
    Compiler( 'fxc' )
    {
      .Executable = .EffectCompilerTool
      .CompilerFamily = "custom"
    }
}

// debug x64
{
    .Config = [
        .Platform = "x64"
        .Config = "Debug"
        Using(.CommonConfig)

        .CompilerOptions    + ' /MDd'
                            + ' /RTC1'
                            + ' /D "_DEBUG"'
                            + ' /ZI'
                            + ' /Od'
                            + ' /JMC'
                            + ' /D "DSC_LOG"'
                            + ' /D "DSC_DEBUG"'
        .EffectCompilerToolArgumentsVS = '/nologo /E"main" /T vs_4_0_level_9_3 /Fo "%2" /Od /Zi "%1"'
        .EffectCompilerToolArgumentsPS = '/nologo /E"main" /T ps_4_0_level_9_3 /Fo "%2" /Od /Zi "%1"'
    ]
    ^ConfigurationArray + .Config
}

// release x64
{
    .Config = [
        .Platform = "x64"
        .Config = "Release"
        Using(.CommonConfig)

        .CompilerOptions    + ' /MD'
                            + ' /Oi'
                            + ' /Zi'
                            + ' /Gy'
                            + ' /GL'
                            + ' /D "NDEBUG"'
                            + ' /D "DSC_RELEASE"'
                            + ' /O2'
         .LibrarianOptions  + ' /LTCG'
         .LinkerOptions     + ' /OPT:REF'
                            + ' /OPT:ICF'
                            + ' /LTCG:incremental'
        .EffectCompilerToolArgumentsVS = '/nologo /E"main" /T vs_4_0_level_9_3 /Fo "%2" "%1"'
        .EffectCompilerToolArgumentsPS = '/nologo /E"main" /T ps_4_0_level_9_3 /Fo "%2" "%1"'
    ]
    ^ConfigurationArray + .Config
}

.CommonVcproject = [
        .ProjectInputPathsRecurse   = true
#if DEVELOPMENT_BUILD_CMD
        .ProjectBuildCommand        = "cd ^$(SolutionDir) & ..\bin\fbuild.exe -config dsc.bff -dbfile ..\build\dsc.fdb -vs -dist -monitor -cache ^$(ProjectName)_^$(Configuration)_^$(Platform) -summary -verbose -showcmds"
        .ProjectRebuildCommand      = "cd ^$(SolutionDir) & ..\bin\fbuild.exe -config dsc.bff -dbfile ..\build\dsc.fdb -vs -dist -monitor -cache -clean ^$(ProjectName)_^$(Configuration)_^$(Platform) -summary -verbose -showcmds"
        .ProjectCleanCommand        = "cd ^$(SolutionDir) & ..\bin\fbuild.exe -config dsc.bff -dbfile ..\build\dsc.fdb -ide clean_^$(ProjectName)_^$(Configuration)_^$(Platform) -summary -verbose -showcmds"
#else
        .ProjectBuildCommand        = "cd ^$(SolutionDir) & ..\bin\fbuild.exe -config dsc.bff -dbfile ..\build\dsc.fdb -vs -dist -monitor -cache ^$(ProjectName)_^$(Configuration)_^$(Platform)"
        .ProjectRebuildCommand      = "cd ^$(SolutionDir) & ..\bin\fbuild.exe -config dsc.bff -dbfile ..\build\dsc.fdb -vs -dist -monitor -cache -clean ^$(ProjectName)_^$(Configuration)_^$(Platform)"
        .ProjectCleanCommand        = "cd ^$(SolutionDir) & ..\bin\fbuild.exe -config dsc.bff -dbfile ..\build\dsc.fdb -ide clean_^$(ProjectName)_^$(Configuration)_^$(Platform)"
#endif
]

function DscVsprojectStaticLib( .ProjectName .Param)
{
    .RootPath = ""
    .RelativePath = ""
    .ConfigurationArray = []
    .VisualStudioSettings = []
    .CommonVcproject = {}
    .LibraryBaseNameDependency = {}
    .AdditionalIncludePaths = {}
    .BuildShaderVS = false
    .BuildShaderPS = false

    Using (.Param)

    ForEach( .ConfigIter in .ConfigurationArray )
    {
        Using( .ConfigIter )

        .CompilerOptions    + ' /D "_LIB"'
                            + ' /Fd"$RootPath$/../build/$ProjectName$/$Platform$/$Config$/intermediate/$ProjectName$.pdb"'

        Library( "$ProjectName$_$Config$_$Platform$" )
        {
            .LibrarianOutput = "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/output/$ProjectName$.lib"
            .CompilerInputPath = "$RelativePath$/"
            .CompilerInputPattern = {"*.cpp", "*.c", "*.cc", }
            .CompilerOutputPath = "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/intermediate/"
            .CompilerOptions + ' /I"$RootPath$\$RelativePath$"'
            .CompilerOptions + ' /I"$RootPath$\$RelativePath$\Source"'
            ForEach( .LibraryName in .LibraryBaseNameDependency )
            {
                ^CompilerOptions + ' /I"$RootPath$\staticlib\$LibraryName$"'
            }
            ForEach( .Path in .AdditionalIncludePaths )
            {
                ^CompilerOptions + ' /I"$Path$"'
            }
        }

        RemoveDir( "clean_$ProjectName$_$Config$_$Platform$" )
        {
            .RemovePaths = { 
                "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/output/", 
                "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/intermediate/", 
                }
        }
    }

    VCXProject( "$ProjectName$_project" )
    {
        .ProjectOutput = "$RelativePath$/$ProjectName$.vcxproj"
        .ProjectConfigs = .ConfigurationArray
        .ProjectInputPaths = "$RelativePath$/"
        .ProjectBasePath = '$RelativePath$/'
        .ProjectFiles = "$RelativePath$/dsc.bff"

        Using (.CommonVcproject)

        .Output = "^$(ProjectName).lib"
        .OutputDirectory            = "$RootPath$/../build/^$(ProjectName)/^$(Platform)/^$(Configuration)/output"
        .IntermediateDirectory 	    = "$RootPath$/../build/^$(ProjectName)/^$(Platform)/^$(Configuration)/intermediate"
        .BuildLogFile               = "$RootPath$/../build/^$(ProjectName)/^$(Platform)/^$(Configuration)/build_^$(SolutionName).log"

        .ProjectAllowedFileExtensions 	= {
                                  '*.cpp', '*.hpp', '*.cxx', '*.hxx', '*.c',   '*.h',  '*.cc',   '*.hh',
                                  '*.cp',  '*.hp',  '*.cs',  '*.inl', '*.bff', '*.rc', '*.resx', '*.m',  '*.mm',
                                  '*.cu',
                                  '*.asm', '*.s',
                                  '*.natvis', '*.editorconfig',
                                  '.hlsl', '.hlsli'
                              }

        .PlatformToolset = ""
        {
            Using( .VisualStudioSettings )	
            ^PlatformToolset = .VS_PlatformToolset
        }
    }
}

function DscVsprojectWindowExe( .ProjectName .Param )
{
    .RootPath = ""
    .RelativePath = ""
    .ConfigurationArray = []
    .VisualStudioSettings = []
    .CommonVcproject = {}
    .LibraryBaseNameDependency = {}
    .LinkerAdditionalDependency = {}
    .AdditionalStaicLibPaths = {}
    .AdditionalIncludePaths = {}
    .DataCopyPath = {}
    .DoDataCopy = false
    .RootCopyPath = {}
    .DoRootCopy = false

    Using (.Param)

    ForEach( .ConfigIter in .ConfigurationArray )
    {
        Using( .ConfigIter )

        .CompilerOptions    + ' /D "_WINDOWS"'
                            + ' /Fd"$RootPath$/../build/$ProjectName$/$Platform$/$Config$/intermediate/$ProjectName$.pdb"'

        ObjectList ("obj_$ProjectName$_$Config$_$Platform$")
        {
            .CompilerInputPath = "$RelativePath$/"
            .CompilerOutputPath = "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/intermediate/"
            .CompilerOptions + ' /I"$RootPath$/$RelativePath$/source"'
            ForEach( .LibraryName in .LibraryBaseNameDependency )
            {
                ^CompilerOptions + ' /I"$RootPath$/staticlib/$LibraryName$"'
            }
            ForEach( .Path in .AdditionalIncludePaths )
            {
                ^CompilerOptions + ' /I"$Path$"'
            }
        }

        .LinkerOptions + ' /PDB:"$RootPath$/../build/$ProjectName$/$Platform$/$Config$/$ProjectName$.pdb"'
                       + ' /SUBSYSTEM:WINDOWS'
        ForEach( .lib in .LinkerAdditionalDependency )
        {
            ^LinkerOptions + ' "$lib$"'
        }

        .ShaderCompilerPath = {"$RelativePath$/shader"}
        .ProjectTargets = {}
        ForEach( .LibraryName in .LibraryBaseNameDependency )
        {
            ^ShaderCompilerPath + "$RootPath$/staticlib/$LibraryName$/shader"
        }

        .ProjectTargets = {}
        ObjectList("vs_$ProjectName$_$Config$_$Platform$")
        {
            .Compiler = "fxc"
            .CompilerOptions = .EffectCompilerToolArgumentsVS
            .CompilerOutputExtension = ".cso"
            .CompilerInputPath = ^ShaderCompilerPath
            .CompilerInputPattern = "*_vs.hlsl"
            .CompilerOutputPath = "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/output/shader"
        }
        .ProjectTargets + "vs_$ProjectName$_$Config$_$Platform$"

        ObjectList("ps_$ProjectName$_$Config$_$Platform$")
        {
            .Compiler = "fxc"
            .CompilerOptions = .EffectCompilerToolArgumentsPS
            .CompilerOutputExtension = ".cso"
            .CompilerInputPath = ^ShaderCompilerPath
            .CompilerInputPattern = "*_ps.hlsl"
            .CompilerOutputPath = "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/output/shader"
        }
        .ProjectTargets + "ps_$ProjectName$_$Config$_$Platform$"

        Executable( "exe_$ProjectName$_$Config$_$Platform$" )
        {
            .LinkerOutput = "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/output/$ProjectName$.exe"
            .Libraries = {"obj_$ProjectName$_$Config$_$Platform$"}
            ForEach( .LibraryName in .LibraryBaseNameDependency )
            {
                .Temp = {"$LibraryName$_$Config$_$Platform$"}
                ^Libraries + .Temp
            }
            .LinkerOptions = ^LinkerOptions
            ForEach( .StaicLibPath in .AdditionalStaicLibPaths )
            {
                ^LinkerOptions + ' /LIBPATH:"$StaicLibPath$"'
            }
        }
        .ProjectTargets + "exe_$ProjectName$_$Config$_$Platform$"

        If (.DoDataCopy)
        {
            CopyDir( "copy_$ProjectName$_$Config$_$Platform$" )
            {
                .SourcePaths = .DataCopyPath
                .Dest = "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/output/data"
            }
            ^ProjectTargets + "copy_$ProjectName$_$Config$_$Platform$"
        }

        If (.DoRootCopy)
        {
            CopyDir( "copy_root_$ProjectName$_$Config$_$Platform$" )
            {
                .SourcePaths = .RootCopyPath
                .Dest = "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/output"
            }
            ^ProjectTargets + "copy_root_$ProjectName$_$Config$_$Platform$"
        }

        Alias( "$ProjectName$_$Config$_$Platform$" )
        {
          .Targets = ^ProjectTargets 
        }

        RemoveDir( "clean_$ProjectName$_$Config$_$Platform$" )
        {
            .RemovePaths = { 
                "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/output/", 
                "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/intermediate/", 
                }
        }
    }

    VCXProject( "$ProjectName$_project" )
    {
        //Print("VCXProject $ProjectName$_project")
        .ProjectOutput = "$RelativePath$/$ProjectName$.vcxproj"
        .ProjectConfigs = .ConfigurationArray
        .ProjectInputPaths  = "$RelativePath$/"
        .ProjectBasePath = '$RelativePath$/'
        .ProjectFiles = "$RelativePath$/dsc.bff"
        .ProjectAllowedFileExtensions 	= {
                                  '*.cpp', '*.hpp', '*.cxx', '*.hxx', '*.c',   '*.h',  '*.cc',   '*.hh',
                                  '*.cp',  '*.hp',  '*.cs',  '*.inl', '*.bff', '*.rc', '*.resx', '*.m',  '*.mm',
                                  '*.cu',
                                  '*.asm', '*.s',
                                  '*.natvis', '*.editorconfig',
                                  '.hlsl', '.hlsli'
                              }

        Using (.CommonVcproject)

        .Output = "$RootPath$/../build/^$(ProjectName)/^$(Platform)/^$(Configuration)/output/^$(ProjectName).exe"
        .OutputDirectory            = "$RootPath$/../build/^$(ProjectName)/^$(Platform)/^$(Configuration)/output"
        .IntermediateDirectory 	    = "$RootPath$/../build/^$(ProjectName)/^$(Platform)/^$(Configuration)/intermediate"
        .BuildLogFile               = "$RootPath$/../build/^$(ProjectName)/^$(Platform)/^$(Configuration)/build_^$(SolutionName).log"

        .PlatformToolset = ""
        {
            Using( .VisualStudioSettings )	
            ^PlatformToolset = .VS_PlatformToolset
        }
    }
}

function DscVsprojectConsoleExe( .ProjectName .Param)
{
    .RootPath = ""
    .RelativePath = ""
    .ConfigurationArray = []
    .VisualStudioSettings = []
    .CommonVcproject = {}
    .LibraryBaseNameDependency = {}
    .AdditionalIncludePaths = {}
    .LinkerAdditionalDependency = {}
    .AdditionalStaicLibPaths = {}
    .DataCopyPath = {}
    .DoDataCopy = false
    .RootCopyPath = {}
    .DoRootCopy = false

    Using (.Param)

    ForEach( .ConfigIter in .ConfigurationArray )
    {
        Using( .ConfigIter )

        .CompilerOptions    + ' /D "_CONSOLE"'
                            + ' /Fd"$RootPath$/../build/$ProjectName$/$Platform$/$Config$/intermediate/$ProjectName$.pdb"'

        ObjectList ("obj_$ProjectName$_$Config$_$Platform$")
        {
            .CompilerInputPath = "$RelativePath$/"
            .CompilerOutputPath = "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/intermediate/"
            .CompilerOptions + ' /I"$RootPath$/$RelativePath$/source"'
            ForEach( .LibraryName in .LibraryBaseNameDependency )
            {
                ^CompilerOptions + ' /I"$RootPath$/staticlib/$LibraryName$"'
            }
            ForEach( .Path in .AdditionalIncludePaths )
            {
                ^CompilerOptions + ' /I"$Path$"'
            }
        }

        .LinkerOptions + ' /PDB:"$RootPath$/../build/$ProjectName$/$Platform$/$Config$/$ProjectName$.pdb"'
                       + ' /SUBSYSTEM:CONSOLE'
        ForEach( .lib in .LinkerAdditionalDependency )
        {
            ^LinkerOptions + ' "$lib$"'
        }
        ForEach( .StaicLibPath in .AdditionalStaicLibPaths )
        {
            ^LinkerOptions + ' /LIBPATH:"$StaicLibPath$"'
        }

        .ProjectTargets = {}
        Executable( "exe_$ProjectName$_$Config$_$Platform$" )
        {
            .LinkerOutput = "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/output/$ProjectName$.exe"
            .Libraries = {"obj_$ProjectName$_$Config$_$Platform$"}
            ForEach( .LibraryName in .LibraryBaseNameDependency )
            {
                .Temp = {"$LibraryName$_$Config$_$Platform$"}
                ^Libraries + .Temp
            }
            ^ProjectTargets + "exe_$ProjectName$_$Config$_$Platform$"
        }

        If (.DoDataCopy)
        {
            CopyDir( "copy_$ProjectName$_$Config$_$Platform$" )
            {
                .SourcePaths = .DataCopyPath
                .Dest = "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/output/data"
            }
            ^ProjectTargets + "copy_$ProjectName$_$Config$_$Platform$"
        }

        If (.DoRootCopy)
        {
            CopyDir( "copy_root_$ProjectName$_$Config$_$Platform$" )
            {
                .SourcePaths = .RootCopyPath
                .Dest = "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/output"
            }
            ^ProjectTargets + "copy_root_$ProjectName$_$Config$_$Platform$"
        }

        Alias( "$ProjectName$_$Config$_$Platform$" )
        {
          .Targets = ^ProjectTargets 
        }

        RemoveDir( "clean_$ProjectName$_$Config$_$Platform$" )
        {
            .RemovePaths = { 
                "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/output/", 
                "$RootPath$/../build/$ProjectName$/$Platform$/$Config$/intermediate/", 
                }
        }
    }

    VCXProject( "$ProjectName$_project" )
    {
        .ProjectOutput = "$RelativePath$/$ProjectName$.vcxproj"
        .ProjectConfigs = .ConfigurationArray
        .ProjectInputPaths  = "$RelativePath$/"
        .ProjectBasePath = '$RelativePath$/'
        .ProjectFiles = "$RelativePath$/dsc.bff"

        Using (.CommonVcproject)

        .Output = "$RootPath$/../build/^$(ProjectName)/^$(Platform)/^$(Configuration)/output/^$(ProjectName).exe"
        .OutputDirectory            = "$RootPath$/../build/^$(ProjectName)/^$(Platform)/^$(Configuration)/output"
        .IntermediateDirectory 	    = "$RootPath$/../build/^$(ProjectName)/^$(Platform)/^$(Configuration)/intermediate"
        .BuildLogFile               = "$RootPath$/../build/^$(ProjectName)/^$(Platform)/^$(Configuration)/build_^$(SolutionName).log"

        .PlatformToolset = ""
        {
            Using( .VisualStudioSettings )	
            ^PlatformToolset = .VS_PlatformToolset
        }
    }
}
