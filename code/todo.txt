- ?shader screen quad checker plus
- ?ui effect like stroke
- ?ui
- ?dsc_dag
- ?draw dag triangle (dont render unless input changed)
- ?partial upload


what is our target project, jank, 2d anime shirow anime draw, subuccus life, legendary quest sandbox, amobeba rts? 
//rts? legendary quest roman sandbox?
// minimal release of rpg/ proof of concept
	- character editor
	- scenario editor
		- dialog
		- encounter
		- map
	- combat
	- local network play/ p2p. one person hosts as dm? or let computer be dm?

slightly rounded main menu buttons in middle, middle stack, dull text, buttons with drop shadows
on roll over, burn out the text to black from mouse pos, fade back if cursor leaves. on keyboard selection, a default rollover pos in the middle?
full screen texture detecting full red pixels to simulate fire effect? (red -> fire then smoke, blue -> ice then mist, green to poision then rain)

ui system
	present geometry (), 
		geometry for a given size and offset in a parent container size
		texture from child, if bigger than our size, then a slow auto scroll unless manual control set

	canvas, stack, flow, text, image, padding, <effect, get told rollover?>?, <toggle>?, <interactable, ie, button, has one child for visual, or n children for state>
	are effects a thing in a node, or a unique node?
	where do interactable/ buttons fit in? 
	<effect rollover? pass to shader the relative mouse position and true/false for mouse over>
	<interactable? have a child for each state and only draw when in that state, allow same child in multiple states
		[default, mouse over, mouse down]

	shrink to content is a flag on each node?

	canvas (n children with pos)
	stack ([horizontal, vertical] flag wrap on bounds, n children, flag manuel scroll on overflow, gap)
	switch (n children but only one is visible) <tab, checkbox>
	text
	image
	fill
	padding (1 child, 4 padding ui coord)
	effect (some effects may take mouse pos?, target size)
	interactable (n children for given input state, time with rollover normalised, time since rollover normalised)


a locale system might get queried with a key and give back a DagValueString
a text renderer, on change of selected locale may be a good time to trigger a release of all the rendered glyphs


ui hierarchy
a screen quad can draw a texture or shader onto some geometry somewhere on the parent render target
a ui panel does that same, but with auto scroll. 
what are leaf nodes like? [fill colour, text, image?] leaf nodes either have theire own size, or just use the given size


leaf (fill colour, png image, nine slice image, debug grid, empty) optional size, else use was is set by parent
node (canvas, stack, switch, padding, effect, interactive, table)


a child of a canvas want a pivot and attach param, but is that a figment of being a canvas child, else just get optional size


size enum [use all of parent provided size, shrink to content, use own size]

top level, get given a screen back buffer (with screen size) or a atbitary render target texture (with arbitaty size) to draw into

node::GetDesiredSize(in_parent_size) => v2
// say we are a screen wide table with 3 columns, 
node::SetAvaliableSize(in_allowed_size) ? or is this our auto scroll when desired size is bigger than avaliable size


what would a dag ui look like

dag ui root node
-inputs index: screen size/ target size, locale, ui scale, component for how to deal with children, command list to add drawing instructions to
-input stack: child dag ui node
-output of drawing to texture, avaliable size?

dag ui node
-inputs index: parent avaliable size, ui scale, locale, component, command list to add drawing instructions to
-input stack: child dag ui node
-output: used size, side effect draw to texture, used size

IUiComponent // canvas, fill, text, image, 9 slice, 



UiDagNodeValueComponent?



root ui node, has a ui component, controls how child input is handled
get output of root ui node generates draw instructions in command list/ frame object

parent avaliable size allowed for each child
trying to get to desired size (what the render target needs to be)
parent determins size that can be draw, auto scroll (or manual scroll) if desired bigger than actual size

node to hold/fetch render target from render target pool of desired size

ui manual component owns geometry?
child node owns render target

use the dag hierarchy to trigger dirty, but not for the child order


//============================ (canvas with one child example)
say we have a ui root node with a canvas component (N0)
the canvas component has one child at a given location and size, defined via canvas slot. (N1)

we request that (R0) draws, with an externally provided rendertarget of a given size (R0)
need to work out the desired size for N1's and make the texture (R1)
need to work out the avaliable size for N1 to draw to N0, and create geometry for that (G1)
draw (R1) to (R0) wuing geomtrey (G1)


canvas slot
  size
  pivot
  parent pivot
  ?geometry
  ?render target
  child ui_node

using dag graph to express data change chains (if x changes, need to redraw y)

(N0) ui root node
  GetValue() should cause a render command list/ frame to be fill out with all the draw instructions needed to draw the ui
  inputs []

DrawUiSystem(in_ui_root_node(N0))
	set TAvaliableSize from provided render target viewport
	UiComponent (C0) converts avaliable size to desired size
	UiComponent (C0) set desired size // or in node
	UiComponent (C0) get child Avaliable size (index)
	UiComponent (C1) converts avaliable size to desired size
	UiComponent (C1) set desired size // or in node
	// to make geometry (G1) we need to know parent size, parent pivot, our desired size, our actual size and our pivot
	// then time accumulation for auto scroll, or current scroll pos for manual scroll


UiComponent
	VectorInt2 ConvertAvaliableSizeToDesiredSize(VectorInt2)
	VectorInt2 GetChildAvaliableSize(our DesiredSize, child index)
	VectorInt2 GetChildOffset(child index) // may need to fetch the desired size of all the children first, ie, for stack
	int32 GetParentChildIndex(); // what index are we of out parent
	//void SetParentChildIndex(int32 in_index);
	//SetGet DesiredSize NodeToken?

this is running multiple streams of information, Dag and data in UiComponent
what happens if a child node index changes, or is that held in UiComponent and visible via dag

UiRootNode
	[] calculate [render command list] // draw ourself to the external render target
		[AvaliableSize] value from external provided render target viewport size
		[AvaliableSize, UiComponent] calculate [DesiredSize]

UiNode
	[] calculate [render command list] // draw ourself to the parent render target
		[Parent.DesiredSize, Parent.UiComponent, index] -> [AvaliableSize]
		[AvaliableSize, UiComponent] calculate [DesiredSize]
		[DesiredSize, RenderTargetPool] calculate [RenderTargetPoolTexture]
		[RenderTargetPoolTexture] calculate [IRenderTarget]
		[Parent.DesiredSize, Parent.UiComponent, index] calculate [GeometryOffset]
		[Parent.DesiredSize, Parent.UiComponent, index] calculate [GeometrySize]
		[Parent.DesiredSize, DesiredSize, GeometryOffset, GeometrySize] calculate [Geometry] // the geometry to draw ourself to the parent

