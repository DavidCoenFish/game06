.ProjectName = "unittest"

//https://github.com/fastbuild/fastbuild/blob/main/Code/Tools/FBuild/FBuild/FBuild.bff

ForEach( .BuildConfig in .BuildConfigs )
{
    Using( .BuildConfig )

    ObjectList( "$ProjectName$_$BuildConfigName$_$Platform$_obj" )
    {
        .CompilerInputPath  = "$_CURRENT_BFF_DIR_$\source\"
        .CompilerOutputPath = "$_WORKING_DIR_$\..\build\$ProjectName$\$Platform$\$BuildConfigName$\intermediate\"
    }

    Executable( "$ProjectName$_$BuildConfigName$_$Platform$" )
    {
        //.CompilerInputPath = "$_CURRENT_BFF_DIR_$\source\"
        //.CompilerOutputPath = "$_WORKING_DIR_$\..\build\$ProjectName$\$Platform$\$BuildConfigName$\intermediate\"

        .LinkerOutput = "$_WORKING_DIR_$\..\build\$ProjectName$\$Platform$\$BuildConfigName$\output\$ProjectName$.exe"
        .Libraries =  { "$ProjectName$_$BuildConfigName$_$Platform$_obj" }

        .LinkerOptions + ' /SUBSYSTEM:CONSOLE'
                       + ' libcmt.lib'     // Std Lib (Multi-Threaded, Static, Release)
                       + ' kernel32.lib'   // Kernel functions
                       + ' Advapi32.lib'
                       + ' Iphlpapi.lib'
                       + ' kernel32.lib'
                       + ' Shell32.lib'
                       + ' Ws2_32.lib'
                       + ' User32.lib'
                       + .CRTLibs_Static

        Print("")
        Print("$ProjectName$_$BuildConfigName$_$Platform$")
        Print(".LinkerOptions:$LinkerOptions$")

    //value of .LinkerOptions
    //  /NODEFAULTLIB 
    //  /WX 
    //  /NOLOGO 
    //  /INCREMENTAL:NO 
    //  /OUT:"%2" "%1" /DEBUG 
    //  /LIBPATH:"C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/lib/x64" 
    //  /LIBPATH:"C:\Program Files (x86)\Windows Kits\10/Lib/10.0.19041.0/um/x64" 
    //  /LIBPATH:"C:\Program Files (x86)\Windows Kits\10/Lib/10.0.19041.0/ucrt/x64" 
    //  /MACHINE:X64 
    //  /SUBSYSTEM:CONSOLE 
    //  libcmt.lib kernel32.lib Advapi32.lib Iphlpapi.lib kernel32.lib Shell32.lib Ws2_32.lib User32.lib LIBCMT.LIB libvcruntime.lib libucrt.lib

    //value of linker command line from visual studio default console app
    // debug x64
    // /OUT:"C:\temp\vsproj\ConsoleApplication1\x64\Debug\ConsoleApplication1.exe" /MANIFEST /NXCOMPAT /PDB:"C:\temp\vsproj\ConsoleApplication1\x64\Debug\ConsoleApplication1.pdb" /DYNAMICBASE "kernel32.lib" "user32.lib" "gdi32.lib" "winspool.lib" "comdlg32.lib" "advapi32.lib" "shell32.lib" "ole32.lib" "oleaut32.lib" "uuid.lib" "odbc32.lib" "odbccp32.lib" /DEBUG /MACHINE:X64 /INCREMENTAL /PGD:"C:\temp\vsproj\ConsoleApplication1\x64\Debug\ConsoleApplication1.pgd" /SUBSYSTEM:CONSOLE /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /ManifestFile:"x64\Debug\ConsoleApplication1.exe.intermediate.manifest" /LTCGOUT:"x64\Debug\ConsoleApplication1.iobj" /ERRORREPORT:PROMPT /ILK:"x64\Debug\ConsoleApplication1.ilk" /NOLOGO /TLBID:1 
    // release x64
    // /OUT:"C:\temp\vsproj\ConsoleApplication1\x64\Release\ConsoleApplication1.exe" /MANIFEST /LTCG:incremental /NXCOMPAT /PDB:"C:\temp\vsproj\ConsoleApplication1\x64\Release\ConsoleApplication1.pdb" /DYNAMICBASE "kernel32.lib" "user32.lib" "gdi32.lib" "winspool.lib" "comdlg32.lib" "advapi32.lib" "shell32.lib" "ole32.lib" "oleaut32.lib" "uuid.lib" "odbc32.lib" "odbccp32.lib" /DEBUG /MACHINE:X64 /OPT:REF /INCREMENTAL:NO /PGD:"C:\temp\vsproj\ConsoleApplication1\x64\Release\ConsoleApplication1.pgd" /SUBSYSTEM:CONSOLE /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /ManifestFile:"x64\Release\ConsoleApplication1.exe.intermediate.manifest" /LTCGOUT:"x64\Release\ConsoleApplication1.iobj" /OPT:ICF /ERRORREPORT:PROMPT /ILK:"x64\Release\ConsoleApplication1.ilk" /NOLOGO /TLBID:1 

    }

    RemoveDir( "clean_$ProjectName$_$BuildConfigName$_$Platform$" ) // Name (required)
    {
        .RemovePaths = { 
            "$_WORKING_DIR_$\..\build\$ProjectName$\$Platform$\$BuildConfigName$\output\", 
            "$_WORKING_DIR_$\..\build\$ProjectName$\$Platform$\$BuildConfigName$\intermediate\", 
            }
    }
}


VCXProject( "$ProjectName$_project" )
{
    .ProjectOutput = "$_CURRENT_BFF_DIR_$\$ProjectName$.vcxproj"

    .ProjectInputPathsRecurse   = true
    .ProjectInputPaths  = "$_CURRENT_BFF_DIR_$\source\"
    .ProjectFiles = "$_CURRENT_BFF_DIR_$\fbuild.bff"
}

{
    .temp = [
        .Path = "fbuild/application/unittest"
        .Items = { "application/unittest/fbuild.bff"}
    ]
    ^FoldersFBuild + .temp
}
