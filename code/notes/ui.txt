ui system
	present geometry (), 
		geometry for a given size and offset in a parent container size
		texture from child, if bigger than our size, then a slow auto scroll unless manual control set

	canvas, stack, flow, text, image, padding, <effect, get told rollover?>?, <toggle>?, <interactable, ie, button, has one child for visual, or n children for state>
	are effects a thing in a node, or a unique node?
	where do interactable/ buttons fit in? 
	<effect rollover? pass to shader the relative mouse position and true/false for mouse over>
	<interactable? have a child for each state and only draw when in that state, allow same child in multiple states
		[default, mouse over, mouse down]

	shrink to content is a flag on each node?

	canvas (n children with pos)
	stack ([horizontal, vertical] flag wrap on bounds, n children, flag manuel scroll on overflow, gap)
	switch (n children but only one is visible) <tab, checkbox>
	text
	image
	fill
	padding (1 child, 4 padding ui coord)
	effect (some effects may take mouse pos?, target size)
	interactable (n children for given input state, time with rollover normalised, time since rollover normalised)


a locale system might get queried with a key and give back a DagValueString
a text renderer, on change of selected locale may be a good time to trigger a release of all the rendered glyphs


ui hierarchy
a screen quad can draw a texture or shader onto some geometry somewhere on the parent render target
a ui panel does that same, but with auto scroll. 
what are leaf nodes like? [fill colour, text, image?] leaf nodes either have theire own size, or just use the given size


leaf (fill colour, png image, nine slice image, debug grid, empty) optional size, else use was is set by parent
node (canvas, stack, switch, padding, effect, interactive, table)


a child of a canvas want a pivot and attach param, but is that a figment of being a canvas child, else just get optional size


size enum [use all of parent provided size, shrink to content, use own size]

top level, get given a screen back buffer (with screen size) or a atbitary render target texture (with arbitaty size) to draw into

node::GetDesiredSize(in_parent_size) => v2
// say we are a screen wide table with 3 columns, 
node::SetAvaliableSize(in_allowed_size) ? or is this our auto scroll when desired size is bigger than avaliable size


what would a dag ui look like

dag ui root node
-inputs index: screen size/ target size, locale, ui scale, component for how to deal with children, command list to add drawing instructions to
-input stack: child dag ui node
-output of drawing to texture, avaliable size?

dag ui node
-inputs index: parent avaliable size, ui scale, locale, component, command list to add drawing instructions to
-input stack: child dag ui node
-output: used size, side effect draw to texture, used size

IUiComponent // canvas, fill, text, image, 9 slice, 



UiDagNodeValueComponent?



root ui node, has a ui component, controls how child input is handled
get output of root ui node generates draw instructions in command list/ frame object

parent avaliable size allowed for each child
trying to get to desired size (what the render target needs to be)
parent determins size that can be draw, auto scroll (or manual scroll) if desired bigger than actual size

node to hold/fetch render target from render target pool of desired size

ui manual component owns geometry?
child node owns render target

use the dag hierarchy to trigger dirty, but not for the child order


//============================ (canvas with one child example)
say we have a ui root node with a canvas component (N0)
the canvas component has one child at a given location and size, defined via canvas slot. (N1)

we request that (R0) draws, with an externally provided rendertarget of a given size (R0)
need to work out the desired size for N1's and make the texture (R1)
need to work out the avaliable size for N1 to draw to N0, and create geometry for that (G1)
draw (R1) to (R0) wuing geomtrey (G1)


canvas slot
  size
  pivot
  parent pivot
  ?geometry
  ?render target
  child ui_node

using dag graph to express data change chains (if x changes, need to redraw y)

(N0) ui root node
  GetValue() should cause a render command list/ frame to be fill out with all the draw instructions needed to draw the ui
  inputs []

DrawUiSystem(in_ui_root_node(N0))
	set TAvaliableSize from provided render target viewport
	UiComponent (C0) converts avaliable size to desired size
	UiComponent (C0) set desired size // or in node
	UiComponent (C0) get child Avaliable size (index)
	UiComponent (C1) converts avaliable size to desired size
	UiComponent (C1) set desired size // or in node
	// to make geometry (G1) we need to know parent size, parent pivot, our desired size, our actual size and our pivot
	// then time accumulation for auto scroll, or current scroll pos for manual scroll, if a node makes geometry, and a node makes scroll amount, then 

//ui stack example (N0) stack component (U0), (N1) text component (U1), (N2) text component (U2)
so, how do we get the previous childs ActualSize back into the parent ui component so the latter child offset can be calculated?
UiComponent::SetChildActualSizeNode(index, node_actual_size)?
worried about order of operation and creating dependency loops.

we have avaliable size (as ui root, this is externally provided, else we query the parent GetChildAvaliableSize)
ui component translates avaliable size into desired size (render target size)
ui component translates desired size into geometry size (is this a parent function?)
maunal or auto scroll is moving the desired size around on the geometry size of the parent

//a ui stack component would want to know all the actual size of the previous children to calculate the offset of a requested child
//a ui stack component to calculate it's desired size may want to calculate the actual size of every child

say we have a node for uv_scroll, is this set directly from the UiComponent, with HasManal flag, or is it set from a dag node calculate chain
if a chain, then we have a problem that every tick will dirty everything. having UvScroll 
or do both, but nothing to drive the update
is there some way of conditionals (if) in dag tree to not set both brances dirty? or is caching results a batter methodology

Desired size == render target viewport size

UiComponent
	VectorInt2 GetChildAvaliableSize(our avaliable size, child index)
	VectorInt2 ConvertAvaliableSizeToDesiredSize(VectorInt2)

	VectorInt2 GetChildGeometryOffset(our avaliable size, child index) // may need to fetch the desired size of all the children first, ie, for stack
	VectorInt2 GetChildGeometrySize(our avaliable size, child index) // may need to fetch the desired size of all the children first, ie, for stack

	int32 GetParentChildIndex(); // what index are we of out parent
	//void SetParentChildIndex(int32 in_index);
	//SetGet DesiredSize NodeToken?
	void Update(const float in_time_delta)
	void AddChildRef(UiComponent* in_ui_component)
	void RemoveChild(UiComponent* in_ui_component)
	SetScrollTraveralPixelDistance(VectorInt2)
	SetScrollNode(DscDag::NodeToken)
	SetChildGeometrySizeNode(DscDag::NodeToken, int32 child_index)
	SetChildGeometryOffsetNode(DscDag::NodeToken, int32 child_index)



this is running multiple streams of information, Dag and data in UiComponent
what happens if a child node index changes, or is that held in UiComponent and visible via dag

UiRootNode
	[] calculate [render command list] // draw ourself to the external render target
		[AvaliableSize] value from external provided render target viewport size
		[AvaliableSize, UiComponent] calculate [DesiredSize]
		[AvaliableSize, DesiredSize] calculate [Geometry]
		[UiScroll] calculate [ShaderConstantBuffer]

UiNode
	[] calculate [render command list] // draw ourself to the parent render target
		[Parent.AvaliableSize, Parent.UiComponent, index] -> [AvaliableSize]
		[Parent.AvaliableSize, AvaliableSize, UiComponent] calculate [DesiredSize]

		[Parent.AvaliableSize, Parent.UiComponent, index] calculate [GeometryOffset]
		[Parent.AvaliableSize, Parent.UiComponent, index] calculate [GeometrySize]
		[GeometrySize, DesiredSize] Calculate [RenderSize]

		[RenderSize, RenderTargetPool] calculate [RenderTargetPoolTexture]
		[RenderTargetPoolTexture] calculate [IRenderTarget]

		[UiScroll, Parent.RenderSize, RenderSize, GeometryOffset, GeometrySize] calculate [ShaderConstantBuffer]


who determins the geometry size, is that a function of the child or the parent, thinking the parent? or it it a know math function (choose min(avaliable size, desired size))?
or is that something a parent stack ui component may want min, but a canvas text child may not want to auto shrink. stack may just use deired size of the child, canvas may use avaliable size, 

a stack desired size is the total of all the child geometry size plus the stack gaps
this means that the stack ui components needs access to all the child node calculate geometry size
and a stack ui component needs the previous child geometry offset anad geometry size to specify the next one



//===============================================================
//  UI version 2 (conditional dag)
//===============================================================

example: canvas, 2 children

externally provided render target (R0)
root ui node 0 (N0)
	component (C0), canvas
	avaliable size from render target (R0) viewport

ui node 1 child (N1)
	component (C1), debug fill?
	render target of desired size (R1)
	calculate node that draws to (R2) 

ui node 2 child (N2)
	component (C2), fill?
	render target of desired size (R2)
	calculate node that draws to (R2) 

UiManager::Draw
	set nodes, time delta node, avaliable size node, render frame node
	invokes get value on (N0)
		invokes get value on (N1)
			draw (C1)
				set render target (R1)
				debug fill
		invokes get value on (N2)
			draw (C2)
				set render target (R2)
				fill
		draw (C0)
			set render target (R0)
			use ui panel to draw texture R1 to R0
			use ui panel to draw texture R2 to R0


UiComponent::HasManualScroll() => bool
UiComponent::GetManualScrollValue() => VectorFloat2
UiComponent::SetManualScrollValue(VectorFloat2)
UiComponent::SetManualScrollValueNode(NodeToken) // when input changes the manual scroll, we want it set into the node chains, else do we introduce the named nodes in a collection/ group?
UiComponent::GetParentChildIndex() => int32 (what is our child index in our parent)
UiComponent::GetChildAvaliableSize(int32 child_index, VectorInt2 our_avaliable_size) => VectorInt2 //, VectorInt2 our_avaliable_size) // pass in or not pass in? trying to move towards ui component writing to value nodes, but what abour reading from them?
//UiComponent::SetAvaliableSizeNode(NodeToken) // root node, the external render taget viewport, non root node, the value fetched from the parent UiComponent::GetChildAvaliableSize
UiComponent::GetChildGeometrySize(child index, child desired, child avaliable)
UiComponent::GetChildGeometryOffset(child index)
rule: we only need need to set a node into the UiComponent if the ui component is going to write a value into it, what about clear colour, if allowed to change at run time?



* example: canvas, 2 children
externally provided render target (R0)
root ui node 0 (N0)
	component (C0), canvas

ui node 1 child (N1)
	component (C1), debug fill?
	render target of desired size (R1)
	calculate node that updates (R1) with correct contents of any input change

ui node 2 child (N2)
	component (C2), fill?
	render target of desired size (R2)
	calculate node that updates (R2) with correct contents of any input change

UiManager::Draw
	invokes get value on (N0)
		invokes get value on (N1)
			draw (C1)
				set render target (R1)
				debug fill
		invokes get value on (N2)
			draw (C2)
				set render target (R2)
				fill
		draw (C0)
			set render target (R0)
			use ui panel to draw texture R1 to R0
			use ui panel to draw texture R2 to R0


	size calculation
from parent, what is our avaliable size
from our component, given the avaliable size, what is our desired size
from parent, given child index and parent avaliable size, what is the geometry offset 
	// parent avaliable size for offset calculation, trying to avoid cyclic dependecy, but offset more relevant for canvas? can stack be funky with horizontal pivot to make centered stack?
from parent, given avaliable and desired size, what is the geometry size 
	// what is the case for this to not be the avalaible size? if desired size is bigger than avaliable? what about shrinking, stack may want to use desired size, a dialog may want min avaliable and desired?
	// is this a parent or a child determined size? parent is doing layout?
for a stack component parent, the parent can now calculate it's desired size? given each child geometry offset and size
to calculate geometry/ shader constant buffer [parent render size, geometry offset, geometry size, 

//[avaliable size, desired size] -> [render size] // redundant? always min? parent can always shring geometry size if we want to shrink?

// logic check, using [desired size] as render target size
[parent ui component, parent child index] -> [avaliable size]
[ui component, avaliable size] -> [desired size]
[parent ui component, parent child index] -> [geometry offset]
[parent ui component, parent child index, desired size] -> [geometry size]
[parent.desired size, geometry size, geometry offset, desired size, scroll] -> [shader constants]
[ui component] -> [clear colour]
[desired size, geometry size, render target pool, clear colour] -> [render target]  // if desired size is smaller than geometry size, expand to geometry size
[all the inputs via enum UiRootNodeInputIndex or UiNodeInputIndex] -> [Render target Shader Resource]

// the UiComponent has logic for if scroll is automatic or manual, and only sets [Scroll] value appropriatly. 
// alternativly, need a way of dag conditional to not dirty decendants on dead branch. (ie, updating tick would dirty draw, even if not auto scroll)
// following this, then a force update set of node that conditionally write to other nodes may be needed? for now just do the tick in the UiComponent and work out DagNode split latter?

IUiComponent::Draw(frame, IRenderTarget) // called once render target is set, expect children to be previously update/ rendered
IUiComponent::SetScrollNode(NodeToken)
IUiComponent::SetScrollPixelTraveralDistance(VectorInt2)
IUiComponent::Update(const float in_time_delta)
IUiComponent::SetDesiredSizeNode(NodeToken) // for making shader constants for ui panel draw
IUiComponent::SetDrawNode(NodeToken) // for parent to get the render target shader resource to draw as texture


//=============================================
data source, want a way to get a data source to be reflected in the ui system,

ie, main menu
	template name "main menu"
	data item title
	data item array buttons
		buton name
		button callback

		=>

	template name "application"
		active screen //"main menu"
			template name "main menu"
			data item title
			data item array buttons
				buton name
				button callback

enum TDataSourceNodeGroup
	TTemplate // string
	TData // node group of enum type known by the 

lets say you had a dag calculate with inputs of the template name
	calculate node has a value of a std::shared<UiInstance>
	and a reference to the UiInstanceManager which has the map of template name to intance factories

UiInstance::GetTemplateName() const => std::string

this covers ctor/dtor of the UiInstanceManager, but once that is done, what drives the layout to create/ update

DagNodeCalculate ui_intance_node->Update();
ui_intance_node->GetValue()->Update();
UiInstance::Update()
	has ref to dag_collection, the NodeToken of this part of the 

move towards all data handed to ui is already in a DagNode (ComponentConstructionHelper) or make a new DagNode version of helper
or alternative data paths in ComponentConstructionHelper, it already had a few NodeToken's (case of interest, getting text in)


long term improvements
have a ui node (for the ui heirarchy layout)
have a top level root node (time delta, input, tooltip layer ref)
have a dedicated draw node (as to be clear that updating it calls update of render, and not to get mixed in with the rest of the hierarchy)

minimise render resources, always draw to texture (avoid the alkward passing in backbuffer ref?), but don't keep a texture for each and every effect
some way of doing more draw to end target than many early, we have the screen space coord, only draw to end target? feedback loop of effects



https://docs.google.com/spreadsheets/d/e/2PACX-1vQUkV5KLKCtAA-HwunVpT9j4e7nLQmmPazYldzuwh4xL5AVj1ypX4vzrPerCsWXha_aL4GnJyVmzKf0/pubhtml#gid=325157066

